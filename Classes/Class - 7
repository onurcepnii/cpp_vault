

_______________________________

Operatörlerin Overload Edilmesi
_______________________________

Nesneleri tam sayı değişkenler gibi kullanılabilecek, yani aslında int türden olmayan fakat int türdenmiş gibi
davranan bir sınıf oluşturalım.

	// önce sınıfın interface'ini oluşturalım.

	// sınıfları içerden dışarıya doğru değil, dışarıdan içeriye doğru tasarlamak gerekiyor.

	// yani client'ların gözüyle bakacağız, client'lar bu sınıfı nasıl kolay kullanırlar? ona yönelik bir interafece oluştururuz.

	// ve genellikle interface oluştururken implementasyon tarafını düşünmeyeceğiz. Önce interface sonra implementasyon.


	bjorne strostoup
	cout << x;	// nesneden stream'e doğru bir gidişat kast ediliyor, inserter
	cout >> x;	// stream'den nesneye doğru bir gidişat kast ediliyor, extractor


Not: iosfwd kütüphanesi bir light header. Forward declarationları içeriyor.

	//mint.h
	#include <ostream>
	#include <istream>

	class Mint{
	public:
		Mint() = default;
		explicit Mint(int x) : mval(x) { } // tamsayı ve gerçek türlerinden mint türlerin örtülü dönüşüm istemiyoruz o yüzden explicit.


		// formatted input-output
		// output işlemleri için operator<<
		// input işlemleri için opreator>>
 
		friend [[nodiscard]] Mint operator+(const Mint& lhs, const Mint& rhs);	// lhs: left hand side, rhs: right hand side
		{
			Mint temp(lhs);
			temp += rhs;
			return temp;
			// bu kodun daha güzeli ==> return Mint(lhs) += rhs;
		}
		friend [[nodiscard]] Mint operator-(const Mint& lhs, const Mint& rhs)	// bu 4 operatörün sık kullanılan isimleri ise
		{
			return Mint(lhs) -= rhs;
		}

		friend Mint operator*(const Mint& lhs, const Mint& rhs);	// realtional operators
		friend Mint operator/(const Mint& lhs, const Mint& rhs);

		// Modern C++ 20 kullanmıyorsanız, sınıfınız da buna uygunsa en yaygın konvensiyon şudur: bunların hepsini ayrı ayrı //implemente etmek yerine =='i implemente ediyoruz. != (eşit değil) =='i çağırıyor.tabi onun değilini döndürüyor.
		// operator< implemente ediyoruz, diğerleri(>,>=,=<) ise onu çağırıyor. Kod tekrarını engelleyen bir mekanizma

		friend bool operator==(const Mint& lhs, const Mint& rhs)	// bu ikisine popüler olarak equality operators denir.
		{
			return lhs.mval == rhs.mval;
		}

		friend bool operator!=(const Mint& lhs, const Mint& rhs)
		{
			return !operator==(lhs,rhs);
			//return !(lhs == rhs);			// bu iki ifade de aynı anlama geliyor.

		}

		friend bool operator<(const Mint& lhs, const Mint& rhs)
		{
			return lhs.mval < rhs.mval;
		}

		friend bool operator>=(const Mint& lhs, const Mint& rhs)
		{
			return !(lhs < rhs);
		}

		friend bool operator>(const Mint& lhs, const Mint& rhs)
		{
			return rhs < lhs;
		}

		friend bool operator<=(const Mint& lhs, const Mint& rhs)
		{
			return !(rhs < lhs);
		}

NOT: Sadece bir değer hesaplamaya yönelik pure function'ların nodiscard attribute ile bildirilmesi gerekiyor. Fakat örneğin
atama operatörlerinin nodiscard olması anlamsız.


		// Sign operatörü nasıl implemente ederiz?

		Mint [[nodiscard]] operator+()const //const çünkü side effect'e neden olmuyor, geri dönüş değeri sınıf türü çünkü bu
		operatör ile oluşturulan ifadeler PR value expr.
		{
			return *this;
		}

		Mint [[nodiscard]] operator-()const
		{
			return Mint(-mval);
		}


		[[nodiscard]] bool operator!()const
		{
			return static_cast<bool>(mval);
		}


		/*

		// pre-increment, post-increment ve pre-decrement, post-decrement operatörlerinin oluşturduğu idiomatic yapıyı burada da
		sürdürebilmek için bir yöntem uygulayacağız. 
		C++'da pre-increment ve pre-decrement operatörleri L value expr., post-increment ve pre-increment operatörleri ise R 
		value expr. oluşturur. Bunun için operatör fonksiyonlarımızı 2 tane overload olacak şekilde implemente edeceğiz.

		operator++() 		// pre (önek)
		operator++(int)		// post (sonek), bu parametreye bir argüman geçmeyeceğiz, sadece imzayı farklı kılabilmek için yazdık
							// o yüzden isim bile vermedik zaten.

		Mint& operator++();	// çünkü l value expr oluşturur, geri dönüş türü sınıf türünden l value expr
		Mint operator++();	// bunda zaten geri dönüş değeri l val değil r value expr olması lazım bizde öyle yaptık

		Peki bu fonksiyonları global operatör fonksiyon olarak yazabilir miyiz? - Evet fakat tercih edildiği senaryo pek yok.
		Programcıların genel tavrı bunları üye operatör fonksiyon olarak yazmak.




		*/

		Mint& operator++() //prefix
		{
			++mval;
			return *this;
		}

		Mint operator++(int) //postfix
		{
			Mint retval{ *this };
			++*this;	// burada aslında nesnemiz yukarıda yazdığımız prefix increment fonk. çağırıyor ve işlemi böyle yapıyor.
						// fakat şöyle de yazabiliriz => operator++();
			return retval;
		}

		Mint& operator--()	//prefix
		{
			--mval;
			return *this;
		}

		Mint operator--(int)	//postfix
		{
			Mint retval{ *this };
			operator--();
			return retval;
		}

		// kullanılmayan, sadece overload mekanizmasını kullanmak için yazdığımız int'e dummy int de denir.


		// C++'da atama operatörleri L value expression oluşturuyorlar
		Mint& operator+=(const Mint&)
		{
			mval += other.mval
		}


		Mint& operator-=(const Mint&);
		Mint& operator*=(const Mint&);
		Mint& operator/=(const Mint&);
		Mint& operator%=(const Mint&);


		friend std::ostream& operator<<(std::ostream&, const Mint&) // chaining için stream nesnesinin kendisini döndürdük, örn chaining ==>  cin >> m1 >> m2 >> m3 >> dval;
		{
			return os << '[' << m.mval << ']'; // int den ayırabilmek için köşeli parantez kullanıyoruz
		}
		friend std::istream& operator>>(std::istream& is, Minst&)
		{
			return is >> m.mval;
		}

	private:
		int mval;	// aslında mintimizin tuttuğu değer



		///members
	
	};

	



	// .cpp

#include "mint.h"

int main()
{
	Mint m1 { 467 }, m2 { 981 }, m3 { 123 }, m4;
}










* Böyle sınıflar kaynak kullanan sınıflar değil, böyle sınıflara wrapper deniyor. Neden? Çünkü asıl int türünü kullanacağız,
fakat int türünden bir member tutacağız ve interface aslında o memberin üstüne işlemlerin yapılacağı API'lerden oluşacak.
Bu tür sarmayıcılarda(wrapper) C++'ın çok önemli bir avantajı ortaya çıkıyor. Zero cost abstraction. Bizim yazdığımız öyle
olmayacak fakat ilerde göreceğiz. Yani sıfır maliyetli soyutlama demek. Yani şöyle; int türünü kullanmak ile mint türünü 
kullanmak açısından maliyet açısından bir fark olmayacak.






* Bazı sınıflara array-like sınıf diyoruz. Yani kendisi bir array değil fakat arraymiş gibi bir interface sağlıyor ve arraymiş
gibi kullanılabiliyor. Bunun en tipik örneği std::array sınıfı.

	ar[i];		//		ar.operator[](i)
	vec[5];		//		vec.operator[](5)
	str[val]	// 		str.operator[](val)

	*Subscript operator fonksiyonu(tipik olmayan senaryoları saymazsak);
	-sınıfın üye fonksiyonu olması zorunlu,
	-köşeli parantezin içindei argüman, sözde indeks olarak fonksiyona geçildiği için fonksiyonun parametresinin tipik olarak
	tamsayı türünden olması gerekiyor. çok büyük çoğunlukla unsigned tamsayı türü kullanırız. typedef olarak da size_t kullanırız

Önemli Nokta: İndeks / subscript operatörü ile oluşturulan ifadeler L value expressiondur. Yani dolayısıyla bu ifadelerin doğal
olarak L value expr. oluşturması gerekiyor. O halde bu operator fonksiyonlarının geri dönüş değerinin L value expr olması
gerekiyor.


Dikkat - Const Overloading
--------------------------

	int main()
	{
		std::string str = "onur cepni";

		str[4] = '!';	// sıkıntı yok, legal

		cout << str << '\n';


		const std::string str1 = "onur cepni";

		str1[4] = '!';	// bu atama illegal, sentaks hatası. fakat bu fonksiyonu kullanabiliriz, mutator olarak kullanamayız. örn;

		auto c1 = str[0];		// bunlar mutate etmediği için problem yok
		autor c2 = str[3];		//

		cout << str << '\n';
	}

Standardın da kullandığı bu biçime "const overloading" diyoruz.

	class String{
	public:
		char& operator[](std::size_t idx);					
		const char& operator[](std::size_t idx)const;		
	};



* Not: C'de olan 
	
		ar[5];	ar[i]	i[ar]
	
	özelliği yazdığımız subscript operatöründe geçerli değil.



// reference qualifiers
Sadece member functionlar için geçerli.

	class Bigint{
		public:
			Bigint& operator=(int)&;	// l value referecence qualified
			// bu fonksiyonun çağırılması için, bu fonksiyonun çağırılacağı sınınf nesnesinin L value olması gerekiyor demek.

			void func()&&;	// bu fonksiyon r value referecence qualified

			void func()&;	

			void func()const;
			//burada 3 tane func() overload'u var.
			
			void func(); // bu sentaks hatası qualified olmadığı için.
	};


	int main()
	{
		Bigint {} = 20;
	}

Bu araç seti ile şunları yapabiliriz;
	-> Bazı fonksiyonların sadece L value veya R value expr. ile çağırılmasını sağlayabiliriz.


----------------------------------------------

Reference Qualifiers
--------------------
Sınıfların non-static üye fonksiyonunu niteleyen niteleyiciler. Bunlar ile ne yapıyoruz? 
- Non-statik bir üye fonksiyonun bir L value expr. olan sınıf nesnesi ile çağırılmasını zorunlu hale getirebiliyoruz.
- Non-statik bir üye fonksiyonun bir R value expr. olan sınıf nesnesi ile çağırılmasını zorunlu hale getirebiliyoruz.
- Buna dayalı olarak overloading yapabiliyoruz


	class Nec{
	public:
		void foo(int)&;
		void foo(int)const &;
		void foo(int)&&;
		void foo(int)const &&;
	};


DİKKAT

	class Nec{
	public:
		void foo();
		void foo()&;	// burada overload olmaz, hata verir!
	};




___________________________________________________________

		Dereferencing & Member Selection ( Arrow )
___________________________________________________________

a * b 	(asterisk)
*ptr

dereferencing operatürünün operandı adres olmak zorunda.
bu operatörün oluşturduğu ifade L value expr.

// pointer like sınıflar için dereferencing operator örnek

	class Nec{

	}; 

	class NecPtr{	// pointer like class
	public:
		NecPtr(Nec* p);
		Nec& operator*();
	};

	int main()
	{
		NecPtr = new Nec;

		(*ptr).foo();
		ptr.operator*().foo();
	}


Member Selection Operator ->

- Normalde binary operatör fakat operator overloading de Unary olarak overload ediliyor. Ama nasıl?

	SmartPtr ptr;

	ptr->mx;	// ptr.operator->() ->mx; // derleyici bu ifadeyi ptr.operator->() , ->mx ifadesinin soluna koydu.

	ptr->foo();
	ptr.operator->()->foo();	// arrow op. geri dönüş değeri pointer olmalı


Örnek;

	class MintPtr{	// movable but not copyable
	public:
		explicit MintPtr(Mint* p) : mp(p) {};
		~MintPtr()
		{
			if(mp)
				delete mp;
		}

		MintPtr(const MintPtr&) = delete;				// hatta bu ikisini bildirmesek bile zaten bunlar böyle kabul edilecek.
		MintPtr& operator=(const MintPtr&) = delete;	//

		MintPtr(MintPtr && other) : mp(other.mp)
		{
			other.mp = nullptr;
		}

		MintPtr& operator=(MintPtr&& other)
		{
			delete mp;
			mp = other.mp;
			other.mp = nullptr;
		}

		Mint& operator*()
		{
			return *mp;
		}

		Mint* operator->()
		{
			return mp;
		}


	private:
		Mint* mp;	// gerçek pointerimiz
	};

	int main()
	{

		using namespace std;

		MintPtr ptr(new Mint(45));

		cout << *ptr << '\n';

		cout << ptr->get() << '\n';
		cout << ptr.operator->()->get() << '\n'; // aslında böyle yukardakı satır
	}



İki tane ihtimal var;
(1) Çok büyük çoğunlukla ok operatör fonksiyonunun geri dönüş değeri pointer olacak. ( %99 )
(2) 





Function Call Operator'un Overload Edilmesi
-------------------------------------------

kendisi bir sınıf nesnesi olmasına rağmen, nesneleri function call operator'un operandı olan sınıflara iki tane terim 
kullanılıyor. => functor class, function object

	Nec foo;

	foo(4);
	foo.operator()(4);

	x();

* Diğer operatör fonksiyonları default argument alamazken function call operator default argument alabilir.

	class Myclass{
	public:
		int operator()(int x)
		{
			std::cout << "Myclass::operator()(int x) x = " << x << "\n";
			std::cout << "this" << this << '\n';

			return 42;
		}

		double operator()(double x)
		{
			std::cout << "Myclass::operator()(int x) x = " << x << "\n";
			std::cout << "this" << this << '\n';

			return 42 * 0.5;
		}

	};

	int main()
	{
		using namespace std;

		Myclass m;

		cout << "&m1 = " << &m1 << '\n';
		auto x = m(25);
		cout << "x = " << x << '\n';
	}


Peki Ne İşe Yarıyor?
--------------------
Burada yapılacak açıklama şuan için tam olarak yapılmayacak çünkü asıl açıklama generik programlama içeriyor.

	class Random{
	public:
		Random(int low, int high) : mlow(low), mhigh(high) {};
		int operator()()
		{
			return rand() % (mhigh - mlow + 1 ) + mlow; // sadece örnek için rand ve diğer bazı şeyleri kullandık.
		}												// normalde önerilmez.

	private:
		int mlow, mhigh;
	};

	int main()
	{
		Random rand1{ 42, 87 };

		for(int i = 0; i < 10; ++i){
			cout << rand1() << ' ';
		}

		cout << '\n';

		Random rand2{ 8764, 2923 };
		for(int i = 0; i < 10; ++i){
			cout << rand2() << ' ';
		}
	}




Type-Cast Operator Functions
----------------------------
User defined conversion oluşturmanın bir yolu daha var -> sınıf için type-cast operator function bildirmek.

-Member function olmak zorunda.

	class Nec{

	};

	int main()
	{
		Nec mynec;
		int ival{};

		ival = mynec;	// error C2440 '=' : cannot conver from 'Nec' to 'int'
	}


////////////////////



	class Nec{
	public:
		operator int()const; // redundancy'den kaçınmak için kurala göre geri dönüş değeri türü yazmıyoruz. zaten fonksiyon
							 // ismindeki tür fonksiyonun geri dönüş değeri türü.
	};

	int main()
	{
		Nec mynec;
		int ival{};

		ival = mynec;	// şuan örtülü dönüşüm oldu ve sentaks hatası yok. derleyici durumdan vazife çıkartır
		// ival = mynec.operator int();
	}


-İsmi hedef tür olmak zorunda. Örneğin double'a çeviriyorsa operator double() olmalı.


class Nec{
	public:
		explicit operator int()const; 
	};

	int main()
	{
		Nec mynec;
		int ival{};

		ival = mynec;	// operator explicit olduğu için örtülü dönüşüm yok
						//fakat aşağıdaki dönüşümler implicit olmadığı için sorun yok.
		ival = static_cast<int>(mynec);
		ival = (int)mynec;	// ival = int(mynec);	böyle de yazabiliriz
		ival = mynec.operator int();
	}


-Explicit anahtar sözcüğü daha öncesinden de vardı fakat bu anahtar sözcüğün tür dönüştürme operatör fonksiyonlarının
nitelendirilmesi C++ 11 ile dile eklendi.



Başka bir sınıf türüne dönüşüm yapabilir miyiz? - Kesinlikle.

	class Erg{};

	class Nec{
	public:
		explicit operator Erg()const;
	}

	int main()
	{
		Erg erg;
		Nec mynec;

		erg = mynec;
		// erg = mynec.operator Erg();
	}

-Function pointer türüne de cast edebiliriz.

	using fptr = int(*) (int);

	class Nec{
	public:
		operator fptr()const;
	};


Tür Dönüştürme Operatörünü Neden Kullanırız?
--------------------------------------------
(1) Bazı sınıflarda bu zaten doğal olarak interface'e bizim eklemek istediğimiz bir api.

Örneğin;

	class Fraction{
	public:
		Fraction(int nom = 0, int den = 1) : m_nom(nom), m_den(den) {}
		explicit operator double()const
		{
			return static_cast<double>(m_nom) / m_den;
		}

	private:
		int m_nom, m_den;
	};

	int main()
	{
		Fraction f1(3, 5);
		Fraction f2(3);

		double dval = f1;
	}




(2) Standard kütüphanede en çok kullanılan senaryo bu. 






------------------------------------------------------


Hatırlatma: Tür dönüştürme operatör fonksiyonları free function olamazlar, sınıfın member fonksiyonu olmak mecburiyetindeler.

---------------------------------------------------

class Nec{
	operator bool()const;
};

int main()
{
	Nec mynec;

	int x = mynec;
	// int x = mynec.operarot bool(); derleyici böyle yapıyor
}

Mülakat
-------


	class Nec{
		operator bool()const
		{
			return true;
		}
	};

	int main()
	{
		Nec n1, n2;

		auto x = n1 + n2;
	}

Derleyici toplama operatörünün operandlarının Nec türünden olduğunu görünce toplama operatörünün operandı olabilecek bir dönüşüm
mümkün mü ona bakıyor. Ve sınıfın operatör bool fonksiyonu olduğunu görüyor. Böylece her iki nesneyi de bu fonksiyona çağrı
yaparak bool türüne dönüştürüyor.

Bu durumda toplama operatörünün operandları bool türünden olacak. Burada integral promotion olacak ve bool türünden olan elemanlar
int'e dönüşecek. Dolayısıyla true olan 1, false olan 0 olacak. İkisi de true olduğu için toplam 2 olacak ve x'in türü int.

Fonksiyon explicit olursa bu şekilde örtülü dönüşüm söz konusu olmaz.

İlginç olan durum ise:
----------------------

Fonksiyon explicit olsa dahi, lojik ifade gereken bağlamda kullanıldığında dönüşüm yapacak. Çağırılmasını engelleyen bir durum
olmayacak. Yani implicit olsa dahi izin verecek.



	class Nec{
		explicit operator bool()const
		{
			return true;
		}
	};

	int main()
	{
		Nec n1, n2;

		if(n1 && n2)	// lojik bağlamda kullanıldığı için implicit dönüşüm yapılacak, sıkıntı yok.
			//

		int x = n1;		// burası lojik bağlam olmadığı için implicit dönüşüm yapılmayacak, hata

		auto b = !n1;	// burası lojik bağlam, problem yok

	}


Enumaration Types İçin de Operatör Fonksiyonu Yazılabilir
---------------------------------------------------------
Free function olarak tanımlayabiliriz.


Örneğin haftanın günlerini tutan bir enum class'ımız var. Ve ++ operatörünü kullandığımızda operator overloading olup örneğin
gün monday ise 1 artıp tuesday olmasını isteyebiliriz.

	enum class Weekday{
		Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday
	};

	std::ostream& operator<<(std::ostream& os, const Weekday& wd)
	{
		constexpr const char* wdays[] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

		return os << wdays[static_cast<int>(wd)];
	}

	Weekday& operator++(Weekday& wd)	// prefix(önek)
	{
		return wd = (wd == Weekday::Sunday) ? Saturday : static_cast<Weekday>(static_cast<int>(wd) + 1 );
	}

	Weekday operator++(Weekday& wd, int)	// postfix (sonek)
	{
		auto ret = wd;
		++wd;
		return ret;
	}

	int main()
	{
		Weekday wd = Weekday::Monday;

		std::cout << wd << '\n';

		for(int i = 0; i < 30; ++i)
		{
			std::cout << ++wd;
			(void)getchar();
		}
	}


Operator overloading bitti.








