
__________________________________________

	Conversion Constructor
__________________________________________

Dönüştüren kurucu işlev.
Special Member Function değil.

Sınıfların tek parametreli ctorları nesneyi oluşturmanın dışında ilginç bir niteliğe daha sahipler.

	class Myclass{
	public:
		Myclass()
		{
			std::cout << "Myclass(int x) x = " << x << "\n";
		}
	};


Bu ctor aynı zamanda parametresi olan türden, bu sınıf türüne örtülü bir dönüşüm gerçekleştirmek için de kullanılır. Function overloading konusunda user declared conversions
kısmını hatırla.


	class Myclass{
	public:
		Myclass() = default;

		Myclass(int x)	// 2
		{
			std::cout << "Myclass(int x) x = " << x << "\n";
		}
	};

	
	int main()
	{
		Myclass m;
		m = 5;		// 2 numaralı cotr olmazsa sentaks hatası, olursa değil.
				// şöyle düşün aslında arkaplanda =>  m = Myclass{ 5 };
	}


Dilin kurallarına göre derleyici bu fonksiyonun (2 numaralı) bildirimini ya da tanımını gördüğünde int türden 5 ifadesinden Myclass sınıfına dönüşümü, bu fonksiyona çağrı
yaparak gerçekleştiriyor.

Derleyici m = 5; 'i gördüğünde durumdan vazife çıkartarak 2 numaralı fonksiyona örtülü olarak çağrı yaptı, 5 ifadesini argüman olarak gönderdi ve bir Myclass nesnesini
oluşturdu. O myclass nesnesi bir PR Value expression, geçici nesne.

Yani burada aslında bir geçici nesne var ama biz görmüyoruz;

	m = 5;

Peki atama nasıl yapılıyor? - Move assignment çünkü bu bir r val expr. Fakat biz ne move assignment ne copy assignmenti görmediğimiz için move assignment'in çağırıldığını
görmüyoruz.

***
Fakat şöyle bir durum var. Derleyici burada eğer move assignment varsa onu kullanır veya eğer move assignment yoksa kendisi oluşturmayı dener ve oluşturursa yine onu 
kullanır. Ancak eğer oluştururken dilin kurallarını çiğneyen bir durum olursa move assignment deleted olarak tanımlanır. Ve bu durumda parametresi const Myclass &r olan ve
hem R hem L value'ye bağlanabilen copy assignment fonksiyonunu kullanır.

Hatta diyelim ki user declared bir copy assignment fonksiyonu var. Bu durumda kurala göre move assignment ve move cotr deleted olur. Derleyici direk copy assignment
function ile işlemi tamamlar. İşte örnek;


	class Myclass{
	public:
		Myclass() = default;

		Myclass(int x)	// 2
		{
			std::cout << "Myclass(int x) x = " << x << "\n";
		}

		Myclass& operator=(const Myclass&r)	
		{
			std::cout << "copy assignment\n";
			return *this;
		}
		
		
	};

	
	int main()
	{
		Myclass m;
		m = 5;		// copy assignment ile bu işlem yapılacak.
	}


-----------------------------------------------------------------------------------------------------

Aşağıdaki kodda 100.000 tane . yazdırılıyor.

struct Myclass{
public:
	Myclass()
	{
		std::cout << '.';
	}
};

int main()
{
	using namespace std;

	size_t n{ 100'000 };

	vector<Myclass> ivec;
}

Fakat burada ivec'e n'i atarsak //  ivec = n;
Madem vector sınıfının size_t parametreli böyle bir constructoru var, burada da az önce bahsettiğimiz kuralların devreye girmesi gerekir. Belki de programcı bu kodu 
yanlışlıkla yazdı ve derleyici örtülü olarak 100.000 elemanlı bir vector oluşturacaktı ve sonra vectorun move assignment fonksiyonu ile bunu ivec'e taşıyacak.

Tabi ki bunu engelleyen bir araç var.. 


	class Myclass{
	public:
		Myclass() { std::cout << "cotr"; }
		~Myclass() { std::cout << "destructor"; }
		Myclass(int) { std::cout << "int "; }
	};

// örneğin bu sınıfta int alan bir constructor var ve diyelim ki şöyle bir kod yazıldı;

	int main()
	{
		Myclass m;
		double dval{};
		bool flag{};

		m = dval;	// ama bunlar int türünden değil ki?
		m = flag;	//
	}



Dilin bunun için 2 farklı kuralları var;

1) Standard Conversion
	Dilin kuralları gereği zaten var olan dönüşüm. Örneğin int'den double'a dönüşüm standard conversion. Narrowing conversion da bir standard conversion'dur.
	Daraltıcı olduğu için standard conversion dışında kalmaz. Hatta long double'dan char'a da dönüşüm dilin kurallarına göre geçerli bir dönüşüm.
									(akıl almaz dönüşüm diyor Neco)

2) User-defined Conversion
	Bir fonksiyona çağrı yapılarak oluşturulan dönüşüm. Tabi sadece conversion constructor ile yapılmıyor. 2 tane birbirinden ayrı user-defined 
	conversion var.

	class Nec{
	public:
		operator int()const;
	};

	int main()
	{
		Nec mynec;
		int ival;

		ival = mynec;
	}

	Şuanlık detaya girmiyoruz, ileride detaylı göreceğiz.



*******************************

	ÖNEMLİ KURAL

*******************************

Eğer bir örtülü dönüşüm (implicit conversion)
	önce standard conversion + user defined conversion uygulanarak yapılabiliyorsa, derleyici gerçekten önce standard conversion uygular ardından da
		user defined conversion uygular. Bunu yapmak zorunda, dilin kuralı! Conversion Sequence


Eğer bir örtülü dönüşüm (implicit conversion)
	önce user defined conversion + standard conversion uygulanarak yapılabiliyorsa, derleyici gerçekten önce standard user defined conversion uygular 
		ardından da standard conversion uygular. Derleyici yine bu dönüşümü yapmak zorunda.

AMA eğer dönüşüm arka arkaya iki tane user defined conversion ile yapılabiliyorsa ( UDC + UDC ) derleyici hiçbir zaman bu dönüşümü örtülü olarak yapmaz.

*******************************	

Şimdi tekrar koda dönelim ve bakalım dönüşümler geçerli mi?



	class Myclass{
	public:
		Myclass() { std::cout << "cotr"; }
		~Myclass() { std::cout << "destructor"; }
		Myclass(int) { std::cout << "int "; }
	};

// örneğin bu sınıfta int alan bir constructor var ve diyelim ki şöyle bir kod yazıldı;

	int main()
	{
		Myclass m;
		double dval{};
		bool flag{};
							standard conversion			user defined conversion
		m = dval;	// geçerli -> Önce double'dan int'e dönüşüm yapılacak sonra int'den Myclass türüne dönüşüm yapılması gerekiyor.

	}

/////////////////////////////////

	class Myclass{
	public:
		Myclass() {};
		Myclass(bool);
	};
	
	int main()
	{
		Myclass m;
		
		m = "onur cepni"; // geçerli. neden? - çünkü array decay ile const char* türüne dönüşüyor, ondan da bool türüne dönüşüm var.
				  // çok tehlikeli. bir çok durumda bizi çok büyük riske sokabilir.
	}


----------------------------------------------

Bunu Nasıl Engelleriz / Kontrol Altına Alırız?

----------------------------------------------

CEVAP => Explicit Constructor


Bir cotr'ı özellikle de tek parametreli cotr'ı explicit anahtar sözcüğü ile bildirmek, o constructoru explicit constructor yapıyor.

	class Myclass{
	public:
		explicit Myclass(int); veya explicit Myclass();
	};


Ne demek bu explicit constructor? 

-Buradaki explicit anahtar sözcüğünü şöyle düşünmekte fayda var : Explicit Only

Yani bu constructor sadece explicit conversion'a izin verir implicit conversion'a izin vermez.

Explicit dönüşüm = tür dönüştürme operatörü kullanarak yapılan dönüşüm. Örtülü olmayan dönüşüm. Örneğin static_cast op. kullanarak yapılan.
Ama bir operatör kullanılmıyorsa, derleyici durumdan vazife çıkararak dönüşüm yapıyorsa, o da implicit conversion.


	class Myclass{
	public:
		Myclass();
		explicit Myclass(int);
	};

	int main()
	{
		Myclass m;
		m = 5;	// sentaks hatası
	}

Burada implicit dönüşümü engellemiş oluyoruz. Fakat kendimiz explicit dönüşüm yapabiliriz şöyle;

	..
	...
	Myclass m;
	int ival{245};

	m = static_cast<Myclass>(ival);


Yani bu şu demek : Eğer niyetimizin dışında, yanlışlıkla olabilecek dönüşümleri tamamen devre dışı bırakmak/onları illegal hale getirmek istiyorsak sınıfın
özellikle tek parametreli constructorlarını explicit olarak nitelemeliyiz.

* Tavsiye : Aksi yönde karar almanızı makul kılacak bir neden olmadıkça, sınıfınızın tek parametreli constructorlarını explicit yapınız!

 Constructor'u explicit yapmamamız örtülü dönüşümü bilerek/fiilen kendiniz destekliyorsunuz, özellikle istiyorsunuz demek. 

* Şöyle düşünelim, constructorun defaultunun explicit cotr olması gerektiğini düşünelim ancak özel durumlarda cotr'u non-explicit yapalım.


***
  Constructor'un explicit olmasının çok önemli bir sonucu daha var. Constructor'un explicit olması durumunda Copy Initialization sentaksı geçerli değil!

	class Myclass{
	public:
		explicit Myclass(int);
	};

	int main()
	{
		using namespace std;
	
		Myclass m(12); 		// direct-init sentaks hatası değil
		Myclass m{ 365 } 	// direct list init sentaks hatası değil
		Myclass m = 342;	// sentaks hatası
	}







* Sınıfların üye fonksiyonlarını niteleyen bazı anahtar sözcükler var. Bunlara duruma göre specifier ya da qualifier diyoruz. Bu specifierları kullanırken
genel bir kural yok. Yani bazılarını sadece bildirimde kullanabiliyoruz, bazılarını hem bildirimde hem de tanımda kullanmamız gerekiyor.

Örneğin explicit için bu duruma bir göz atalım.

	// .h
	class Myclass{
	public:
		explicit Myclass(int);
	};


	//.cpp
	Myclass::Myclass(int) {}	// explicit keyword bildirimde varken tanımda da olamaz! 
					// yani 	explicit Myclass::Myclass(int) {}	// sentaks hatası

//////////////////////////
	
	//.h
	class Myclass{
	public:
		static int foo();	// static keywod yoksa non-static member function, varsa static member function
	};

	//.cpp
	int Myclass::foo()		// burada da tekrar keyword ü eklemiyoruz tanımda. Eklersek sentaks hatası olur.
	{
	
	}
	

///////////////////////////

	// .h
	class Myclass{
	public:
		int foo()noexcept;
	
	};

	// .cpp
	noexcept int Myclass::foo()	// burada da tam tersi, yazmak gerekiyor.
	{
	
	}



Görüldüğü üzere uniform bir kural yok.


Explicit Constctor 
	1) Örtülü dönüşüme izin vermez, sadece explicit dönüşüme izin verir.
	
	2) 


***
  Her ne kadar programcılar arasında sadece int parametreli cotr'ın explicit olması sanki söz konusuymuş gibi bir yanlış algı var. Yanlış algının nedeni tek
parametreli olmayan cotr'ların explicit olamaması değil, az tercih edilmesi.

	class Myclass{
	public:
		Myclass();
	};
	
	int main()
	{
		Myclass x = {}; // aslında böyle yazmak şöyle yazmaya eşdeğer => Myclass x = Myclass {};
				// yani bu durumda aslında yine örtülü bir dönüşüm oluyor dilin kurallarına göre.
				// ancak şimdi default cotr'u explicit yapar isek bu sentaks hatası olacak.
	}


///////////////////////

	class Myclass{
	public:
		Myclass(int, int);
	};

	int main()
	{
		Myclass x = { 12, 56 };	// henüz görmedik fakat böyle de kullanabiliyoruz. Sanki burada da bu türden bir geçici nesne oluşturuluyor diye
					// düşünelim ama bu da bir ilk değer verme biçimi.
					// yine aynı şekilde burada da iki parametreli cotr'u explicit yaparsak bu şekilde kullanım sentaks hatası.
	}




//////////////////////


	class Myclass{
	public:
		Myclass(int);
	};
	
	void func(Myclass);

	int main()
	{
		func(123);	// burada örtülü dönüşüm gerçekleşecek. fakat cotr explicit olursa bu da sentaks hatası.
				// aslında bu da bir koruma faktörü.
	}


///////////////////////
return statement söz konusu olduğunda


	class Myclass{
	public:
		Myclass(int);
	};

	Myclass foo()
	{
		return 321321;  // return statement'i int veya int'e dönüşebilen bir türden olursa
				// oysa cotr explicit olursa sentaks hatası olur.
	}

	int main()
	{

	}
	

bir durum daha var;

/////////////////////////////

	class Myclass{
	public:
		explicit Myclass(int);
		Myclass(double);
	};

	int main()
	{
		Myclass m = 12; // sentaks hatası yok. Burada copy initialization sentaksı ile ilk değer verdiğimiz zaman, explicit cotr overload sete dahil
				// olmuyor.
	}



-----------------------------------------------------------------------------------------------------------------------------------------------------------




________________________________________

	Delegating Constructor
________________________________________

Bir constructorun bir nesneyi hayata getirirken sınıfın bir başka constructorunu kullanarak memberların initialize edilmesini sağlamak.

Neden Var?
- 


Eskiden şöyle yapılırdı;

Burada constructorlar nesneyi oluştururken bazı aynı kodları kullanıyorlar. Bunun için sadece member functionların erişebileceği private alanda bir fonksiyon
tanımladık ve o fonksiyon içinde ctor'ların kullanacağı bu ortak kodu yazdık. Bu sayede kod tekrarı yapmadık daha derli toplu oldu.

	class Myclass{
	public:
		Myclass(int, int, int)
		{
			//...
			init();
		}
		Myclass(int,int);
		Myclass(int);
		Myclass(const char*);

	private:
		void init();
	};


Bu yaklaşımın tabi dezavantajları da var:
 
- Bu fonksiyonun private olması client kodların ona çağrı yapmasını engelliyor fakat sınıfın üye fonksiyonları onu
çağırabilir. Oysa biz bu fonksiyonu sadece ctor'ların çağırabilmesi için yazmıştık. Bilerek veya bilmeyerek sınıfın bir başka member fonksiyonu bu fonksiyonu
çağırdığında derleyici bir sentaks hatası vermeyecek çünkü sınıfın üye fonksiyonları için böyle bir erişim kontrolü yok.

- Fonksiyona biz init ismini verdik fakat bunun initialize fonksiyonu olmadığı açık. Neden? Çünkü programın akışı ctor'un ana bloğuna girdiğinde zaten 
non-static data memberlar hayata gelmiş durumda. Ctor non-static data memberları initialize ediyor. Fakat bu initialize işlemini bir ortak kodda toplarsak
aslında o initializer olmaktan çıkıyor. Dediğimiz gibi init() e çağrı yapıldığı noktada zaten bu elemanlar hayata gelmiş oluyor. Burada da bir çelişki oluyor.
Bazı programcılar da isim olarak post_init() gibi isimler verebiliyorlar.

Buna daha iyi bir seçenek olarak, C++11 ile dile eklenen delegating constructor aracı var!

Bir ctor, ctor initializer listte sınıfın diğer ctor'larından birine çağrı yaparak initialization yapma sürecini o ctor'a delege edebiliyor. Örnek;

	class Myclass{
	public:
		Myclass(int, int, int);
		Myclass(int, int);
		Myclass(int x) : Myclass(x, x, x)
		{  }
		Myclass(const char*) : Myclass(std::atoi(p)) { }
	}; 


Önemli bir başka kural daha var;
-Delegating Constructor sadece bir ctor'a delege edilecek, yani ctor initializer listte başka bir üye olmayacak.

	class Myclass{
	public:
		Myclass(int,int) : mx{x},  my{y} { }
		Myclass(int x) : Myclass(x,x), mz{335} { } // sentaks hatası
	private:
		int mx, my, mz;
	};


Fakat şunda bir problem yok;

	class Myclass{
	public:
		Myclass(int,int) : mx{x},  my{y} { }
		Myclass(int x) : Myclass(x,x) { }
	private:
		int mx, my, mz{ 21 };
	};
