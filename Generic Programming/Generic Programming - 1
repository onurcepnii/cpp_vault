
______________________________________

		GENERIC PROGRAMMING
______________________________________

Türden bağımsız programlama.

C++'ın en kuvvetli yönü generic programlama.

C++'da oluşturulan generiklik, derleyicinin compile time'da kod yazmasıyla oluşturulan generiklik.

C derleyicisinden farklı olarak, C++ derleyicisi bizim için derleme zamanında belirli tür ya da türlere yönelik kod yazabiliyor.

C++'da generic programlama derken aksi söylenmedikçe kast edilen: derleyiciye compile time'da kod yazdırmak.

Bu açıdan baktığımız zaman C++ kodlarını 2'ye ayırabiliriz. Biri doğrudan derleyicinin derlediği kod, diğeri ise varlık nedeni derleyiciye kod yazdırmak olan kod.

"Template" denilen araç C++'da derleyiciye kod yazdırmanın aracı.

Genel olarak bu konuya "tmp" de deniyor. "Template Meta-Programming"

Standard kütüphanenin en önemli bileşeni STL.
"Standard Template Library"


Template'lerin belirli kategorileri var:

(1) Function Template
	Adı üzerinde amacı derleyiciye fonksiyon kodu yazdırmak olan kod.

(2) Class Template
	Adı üzerinde derleyiciye sınıf kodu yazdıran templateler.

(3) Variable Template
	Derleyiciye bir değişken tanımı yaptıran template.

(4) Alias Template
	Derleyiciye bir tür eş ismi yaptıran template.

(5) Concept (C++20)

***
Derleyiciden bir template'den faydalanarak (concept hariç) compile time'da oluşturduğu varlığın kendisine o template'in bir specialization'u deniyor.

Yani bir fonksiyon şablonundan(template) elde edilen ürünün kendisi, yani oluşan fonksiyon o fonksiyon şablonunun bir specializationu(açılım).

Yani function template'in bir specialization'u bir function'un kendisi,
Class template'in bir specialization'u bir class'ın kendisi,
Variable template'in bir specialization'u bir variable'ın kendisi,
Alias template'in bir specialization'u bir type-alias declarationunun kendisi.

Concept hariç bu templatelerin hepsinde, template oluşturmak için template keyword kullanıyoruz.

	template <>

Angular Brackets'in içinde tanıtılan isimlere o template'in parametreleri deniyor. -> template parameters.

Temp parametreleri farklı kategorilerde olabiliyor. 3 tane farklı kategori var.

-Type Parameter
	Type parametre adı üzerinde bir türe karşılık geliyor. Yani derleyici template'imizden faydalanarak bir specialization oluşturduğunda, type parametre yerine bir type 
	kullanıyor. örneğin int, double, char gibi vs.

-Non-Type Parameter
	Adı üzerinde tür olmayan bir parametre. Bir sabit veya belirli bir türden değer gibi. Kendisi bir tür değil ama bir türden değere karşılık geliyor.

-Template Parameter
	İleri bir konu, ileri C++ kursunda işleniyor.



// T is a type

template <class T>

derleyici T'nin yerine, kendi yazdığı kodda bir tür kullanacak. 

template <typename T>

class keyword kullanmamız ile typename keyword kullanmamız arasında hiçbir fark yok bu bağlamda.

class keyword'un belki bir dezavantajı şu, sanki bu template parametresi karşılığı derleyicinin kullanacağı türe, ona da template argümanı deniyor, sanki bir class type olma 
zorunluluğu varmış gibi çağrışım oluşturuyor. Oysa derleyicinin specialization için yazacağı kodda T karşılığı kullanılan template argümanı primitive bir tür olabilir. 
Örneğin T için int veya double kullanılabilir vs.

***
typename keyword'un kullanıldığı bir başka bağlam daha var. o bağlamda typename'in yerine class kullanamıyoruz.

Birden fazla template parametresi olabilir. O zaman comma seperated list kullanıyoruz ve farklı isimler seçiyoruz.
	
	template <typename T, typename U>

Eğer template içinde parametreleri kullanmayacaksak isim vermek zorunda değiliz, aynı fonksiyonlarda olduğu gibi.

	template <typename, typename>


Tipik olarak konvensiyonel bazı isimler kullanılıyor: T, U, V, W gibi isimler çok yaygın. Ya da bazı özel template parametreler için, onların hizmet ettiği türlere çağrışım 
yapsın diye iter, fn gibi isimler de kullanılıyor.


bu 1.kategoriydi.

----------------

2.kategori ise Non-Type Parameter.

Non-type parametre bir değere karşılık geldiği için, typename ya da class keyword kullanmak yerine o kullanılacak değerin türünü yazıyoruz.

	template <int x>
	class Myclass {

	};

Yani bu şu demek, derleyici bizim için bu şablondan bir kod ürettiğinde template non-type parametresi karşılığı bu türden bir değer kullanacak. Örneğin biz 10 değerini seçmiş 
isek, derleyicinin yazdığı sınıf kodunda benim x'i kullandığım yerde 10 sabiti kullanılacak.

Aynı template içide hem type parametre hem non-type parametre olabilir.


-----------------

İster fonksiyon şablonu olsun, ister sınıf şablonu olsun biz Template parametrelerini kod içinde istediğimiz gibi (belirli şartlara uymak kaydıyla) kullanabiliyoruz.

template <typename T, int n>
T func(T x)
{
	//..
}

Madem derleyici bir template koddan bir spzecialization oluştururken template'in parametrelere karşılığı kullanılan template argümanlarını bilmek zorunda peki nasıl bilecek?

Kısaca derleyici template parametreleri için kullanılan argümanların neler olacağını nasıl bilecek?

- Bunun için farklı farklı araçlar var. Bu araçlardan biri "deduction". Derleyici koda bakarak siz template parametresi karşılığı hangi argümanın kullanılacağını söylemesek 
de koda bakarak derleyici bunun çıkarımını yapabiliyor.(deduction)

- İkinci yol, template parametreleri karşılığı kullanılacak template argümanlarının explicit olarak derleyiciye bildirilmesi. (Yani belirli bir sentaksla adeta derleyiciye 
diyeceğiz ki: derleyici ben senin çıkarım yapmanı istemiyorum, template parametreleri karşılığı şu türü ya da şu değeri vs. kullanabilirsin. diyoruz.)

C++17 den önce deduction mekanizması sadece fonksiyon şablonları için söz konusuydu, yani sınıf şablonları için deduction söz konusu değildi.

CTAD ( Class Template Argument Deduction) belirli sınırlar dahilinde sınıf şablonlarında da template parametrelere karşılık gelen template argümanlarının çıkarımı yapılması 
olanağı kazandırıldı.














